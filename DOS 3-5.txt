ASSIGNMENT-3
Q1
echo "Enter first number: "
read num1
echo "Enter second number: "
read num2
sum=$((num1+num2))
echo "Sum : $sum"
diffn=$((num1-num2))
echo "Difference : $diffn"
mul=$((num1*num2))
echo "Multiplication: $mul"
div=$((num1/num2))
echo "Division: $div"

Q2
read -p "Enter first number: " a
read -p "Enter operator(+,-,*,/): " op
read -p "Enter second number: " b
result=$(echo "$a $op $b" | bc -l)

echo "Result: $result"

Q3
read -p "Enter Ramesh's basic salary: " basic_salary
dearness_allowance=$(echo "$basic_salary * 0.40" | bc -l)
house_rent_allowance=$(echo "$basic_salary * 1.20" | bc -l)
gross_salary=$(echo "$basic_salary + $dearness_allowance + $house_rent_allowance" | bc -l)
echo "Gross Salary: $gross_salary"

Q4
read -p "Enter a five digit number: " number
sum=0
for((i=0;i<${#number};i++)); do
digit=${number:i:1}
sum=$((sum+digit))
done
echo "The sum of the digit is: $sum"

Q5
echo "Enter Cost Price: "
read Cp
echo "Enter Selling Price: "
read Sp

if [ "$Sp" -gt "$Cp" ]; then
    profit=$(( Sp - Cp ))
    echo "Profit: ${profit}"
elif [ "$Sp" -lt "$Cp" ]; then
    loss=$(( Cp - Sp ))
    echo "Loss: ${loss}"
else
    echo "No Profit No Loss"
fi

Q6
echo "Enter the year to be checked: "
read year

if [ $# -eq 1 ]; then
   year=$1
fi

if (( (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0) )); then
   echo "$year is a Leap year."
else
   echo "$year is not a leap year."
fi

Q7
echo "Enter internal marks: "
read int_marks
echo "Enter percentage of attendance: "
read att

if [ "$int_marks" -ge 20 ] && [ "$att" -ge 75 ]; then
   echo "Allowed for exams."
else
   echo "Debarred from exams."
fi

Q8
num1=$1
num2=$2
num3=$3

if [ "$num1" -le "$num2" ] && [ "$num1" -le "$num3" ]; then
    smallest=$num1
elif [ "$num2" -le "$num1" ] && [ "$num2" -le "$num3" ]; then
    smallest=$num2
else
    smallest=$num3
fi



echo "The smallest number is: $smallest"


Q9
echo "Enter a character: "
read -n 1 input_char
echo
if [ -z "$input_char" ] || [ "${#input_char}" -gt 1 ]; then
    echo "You have entered more than one character."
elif [[ $input_char =~ [0-9] ]]; then
    echo "This is a number."
elif [[ $input_char =~ [a-z] ]]; then
    echo "This is a lower case alphabet."
elif [[ $input_char =~ [A-Z] ]]; then
    echo "This is an upper case alphabet."
else
    echo "This is a special symbol."
fi

Q10
echo "Enter a day: "
read day
case "$day" in
  "Monday")
    echo "The DOS class is at 11:00 AM in E-309."
    ;;
  "Tuesday")
    echo "No class on Tusday."
    ;;
  "Wednesday")
    echo "No class on Wednesday."
    ;;
  "Thursday")
    echo "The DOS class is at 12:00 PM in C-127."
    ;;
  "Friday")
    echo "The DOS class is at 05:00 PM in C-127."
    ;;
  "Saturday")
    echo "The DOS class is at 08:00 AM in C-127."
    ;;
  "Sunday")
    echo "Holiday"
    ;;
  *)
    echo "Invalid day entered. Please try again."


Q11
if [ "$#" -ne 2 ]; then
  echo "Usage: $0 filename1 filename2"
  exit 1
fi
file1=$1
file2=$2
if cmp -s "$file1" "$file2"; then
  echo "Files $file1 and $file2 have same content."
  rm "$file2"
else
  echo "Files $file1 and $file2 have different content."
fi


Q12
if [ "$#" -ne 3 ]; then
  echo "Invalid input."
  exit 1
fi
op1=$1
operator=$2
op2=$3
case "$operator" in
  +)
    result=$((op1 + op2))
    ;;
  -)
    result=$((op1 - op2))
    ;;
  x)
    result=$((op1 * op2))
    ;;
  /)
    if [ "$op2" -eq 0 ]; then
    echo "Division by zero is not allowed."
    exit 1
    fi
    result=$((op1 / op2))
    ;;
  %)
    result=$((op1 % op2))
    ;;
  ^)
    result=$((op1 ** op2))
    ;;
  *)
    echo "Invalid input."
    ;;
esac
echo "$op1 $operator $op2 = $result"


ASSIGNMENT-4
Q1
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

int main() {
    pid_t pid;
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } 
    else if (pid == 0) {
        printf("Child Process: PID = %d, Parent PID = %d\n", getpid(), getppid());
        while (1) {
            sleep(1);
        }
    }
    else {
        printf("Parent Process: PID = %d, Child PID = %d\n", getpid(), pid);
        while (1) {
            sleep(1);
        }
    }

    return 0;
}


Q3
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

#define BUFFER_SIZE 1024

void copy_file(const char *source, const char *destination) {
    FILE *src = fopen(source, "r");
    FILE *dest = fopen(destination, "w");
    char buffer[BUFFER_SIZE];

    if (src == NULL || dest == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    while (fgets(buffer, BUFFER_SIZE, src) != NULL) {
        fputs(buffer, dest);
    }

    fclose(src);
    fclose(dest);
}

void display_file(const char *filename) {
    FILE *file = fopen(filename, "r");
    char buffer[BUFFER_SIZE];

    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    while (fgets(buffer, BUFFER_SIZE, file) != NULL) {
        printf("%s", buffer);
    }

    fclose(file);
}

void sort_file_reverse(const char *filename) {
    FILE *file = fopen(filename, "r");
    char *lines[100];
    char buffer[BUFFER_SIZE];
    int count = 0;

    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    while (fgets(buffer, BUFFER_SIZE, file) != NULL) {
        lines[count] = strdup(buffer);
        count++;
    }
    fclose(file);

    // Sort lines in reverse order
    for (int i = 0; i < count - 1; i++) {
        for (int j = i + 1; j < count; j++) {
            if (strcmp(lines[i], lines[j]) < 0) {
                char *temp = lines[i];
                lines[i] = lines[j];
                lines[j] = temp;
            }
        }
    }

    // Print sorted lines
    for (int i = 0; i < count; i++) {
        printf("%s", lines[i]);
        free(lines[i]); // Free allocated memory
    }
}

int main() {
    pid_t pid1, pid2, pid3;

    // First child process
    if ((pid1 = fork()) == 0) {
        printf("First Child: PID = %d, Parent PID = %d\n", getpid(), getppid());
        copy_file("file1.txt", "file2.txt");
        exit(0);
    }
    sleep(1); // Parent process sleeps for 1 second

    // Second child process
    if ((pid2 = fork()) == 0) {
        printf("Second Child: PID = %d, Parent PID = %d\n", getpid(), getppid());
        display_file("file2.txt");
        exit(0);
    }
    sleep(1); // Parent process sleeps for 1 second

    // Third child process
    if ((pid3 = fork()) == 0) {
        printf("Third Child: PID = %d, Parent PID = %d\n", getpid(), getppid());
        sort_file_reverse("file2.txt");
        exit(0);
    }

    // Parent process waits for all children to finish
    wait(NULL);
    wait(NULL);
    wait(NULL);

    printf("Parent Process: PID = %d, completed all child processes.\n", getpid());
    return 0;
}


Q4
#include <stdio.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <stdbool.h>

// Function to check if a number is prime
bool isPrime(int n) {
    if (n < 2) return false;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) return false;
    }
    return true;
}

// Function to generate Fibonacci series
void generateFibonacci(int fib[], int n) {
    fib[0] = 0;
    if (n > 1) fib[1] = 1;
    for (int i = 2; i < n; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
}

int main() {
    int n;
    pid_t pid;

    // Input the length of the Fibonacci series
    printf("Enter the length of the Fibonacci series: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("The length should be a positive integer.\n");
        return 1;
    }

    // Shared memory setup
    key_t key = IPC_PRIVATE; // Generate private key
    int shmid = shmget(key, n * sizeof(int), IPC_CREAT | 0666); // Allocate shared memory
    if (shmid < 0) {
        perror("shmget");
        exit(1);
    }

    // Fork the process
    pid = fork();

    if (pid < 0) { 
        // Fork failed
        perror("fork");
        exit(1);
    } 
    else if (pid == 0) {
        // Child process
        printf("Child process generating Fibonacci series...\n");
        int *fib = (int *)shmat(shmid, NULL, 0); // Attach to shared memory
        if (fib == (int *)-1) {
            perror("shmat");
            exit(1);
        }

        generateFibonacci(fib, n); // Generate the Fibonacci series

        // Detach shared memory
        shmdt(fib);
        printf("Child process completed.\n");
        exit(0);
    } 
    else {
        // Parent process
        wait(NULL); // Wait for child to complete
        int *fib = (int *)shmat(shmid, NULL, 0); // Attach to shared memory
        if (fib == (int *)-1) {
            perror("shmat");
            exit(1);
        }

        printf("Fibonacci Series: ");
        for (int i = 0; i < n; i++) {
            printf("%d ", fib[i]);
        }
        printf("\n");

        // Display prime Fibonacci numbers and their positions
        printf("Prime Fibonacci Numbers in the series:\n");
        for (int i = 0; i < n; i++) {
            if (isPrime(fib[i])) {
                printf("Position %d: %d\n", i, fib[i]);
            }
        }

        // Detach and remove shared memory
        shmdt(fib);
        shmctl(shmid, IPC_RMID, NULL); // Remove shared memory
    }

    return 0;
}

ASSIGNMENT-5
Q1
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 10

int buffer[BUFFER_SIZE];
int count = 0;

sem_t empty, full, mutex;

void *producer(void *param) {
    int item;
    for (int i = 0; i < 20; i++) {
        item = rand() % 100;
        printf("Producer: waiting on empty...\n");
        sem_wait(&empty);

        printf("Producer: acquired mutex...\n");
        sem_wait(&mutex);

        buffer[count++] = item;
        printf("Producer produced %d\n", item);

        sem_post(&mutex);
        sem_post(&full);
    }
    pthread_exit(NULL);
}

void *consumer(void *param) {
    int item;
    for (int i = 0; i < 20; i++) {
        printf("Consumer: waiting on full...\n");
        sem_wait(&full);

        printf("Consumer: acquired mutex...\n");
        sem_wait(&mutex);

        item = buffer[--count];
        printf("Consumer consumed %d\n", item);

        sem_post(&mutex);
        sem_post(&empty);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t prod, cons;

    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    sem_init(&mutex, 0, 1);

    setvbuf(stdout, NULL, _IONBF, 0);

    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}

Q2
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

sem_t sem_odd;
sem_t sem_even;

void* print_odd(void* arg) {
    for (int i = 1; i <= 20; i += 2) {
        sem_wait(&sem_odd);
        printf("Thread A: %d\n", i);
        sem_post(&sem_even);
    }
    pthread_exit(NULL);
}
void* print_even(void* arg) {
    for (int i = 2; i <= 20; i += 2) {
        sem_wait(&sem_even);
        printf("Thread B: %d\n", i);
        sem_post(&sem_odd);
    }
    pthread_exit(NULL);
}
int main() {
    pthread_t thread_odd, thread_even;
    sem_init(&sem_odd, 0, 1);
    sem_init(&sem_even, 0, 0);
    pthread_create(&thread_odd, NULL, print_odd, NULL);
    pthread_create(&thread_even, NULL, print_even, NULL);
    pthread_join(thread_odd, NULL);
    pthread_join(thread_even, NULL);
    sem_destroy(&sem_odd);
    sem_destroy(&sem_even);

    return 0;
}

Q3
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define MAX_PRINT 20

sem_t semA, semB;

void *printA(void *arg) {
    for (int i = 0; i < MAX_PRINT; i++) {
        sem_wait(&semA);
        printf("A");
        sem_post(&semB);
    }
    return NULL;
}
void *printB(void *arg) {
    for (int i = 0; i < MAX_PRINT; i++) {
        sem_wait(&semB);
        printf("B");
        sem_post(&semA);
    }
    return NULL;
}

int main() {
    pthread_t threadA, threadB;
    sem_init(&semA, 0, 1);
    sem_init(&semB, 0, 0);
    pthread_create(&threadA, NULL, printA, NULL);
    pthread_create(&threadB, NULL, printB, NULL);
    pthread_join(threadA, NULL);
    pthread_join(threadB, NULL);
    sem_destroy(&semA);
    sem_destroy(&semB);
    printf("\n");
    return 0;
}

Q4
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define COUNT_LIMIT 10

sem_t sem_countdown, sem_countup;

void *countdown(void *arg) {
    for (int i = COUNT_LIMIT; i >= 1; i--) {
        sem_wait(&sem_countdown);
        printf("Countdown: %d\n", i);
        fflush(stdout);
        sem_post(&sem_countup);
    }
    return NULL;
}

void *countup(void *arg) {
    for (int i = 1; i <= COUNT_LIMIT; i++) {
        sem_wait(&sem_countup);
        printf("Countup: %d\n", i);
        fflush(stdout);
        sem_post(&sem_countdown);
    }
    return NULL;
}

int main() {
    pthread_t thread_countdown, thread_countup;
    sem_init(&sem_countdown, 0, 1);
    sem_init(&sem_countup, 0, 0);
    pthread_create(&thread_countdown, NULL, countdown, NULL);
    pthread_create(&thread_countup, NULL, countup, NULL);
    pthread_join(thread_countdown, NULL);
    pthread_join(thread_countup, NULL);
    sem_destroy(&sem_countdown);
    sem_destroy(&sem_countup);
    printf("Threads finished execution.\n");
    return 0;
}

Q5
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

sem_t sem_A;
sem_t sem_B;
sem_t sem_C;
int counter = 1;

void* print_sequence_A(void* arg) {
    for (int i = 0; i < 7; i++) {
        sem_wait(&sem_A);
        printf("A%d\n", counter);
        counter++;
        sem_post(&sem_B);
    }
    return NULL;
}

void* print_sequence_B(void* arg) {
    for (int i = 0; i < 7; i++) {
        sem_wait(&sem_B);
        printf("B%d\n", counter);
        counter++;
        sem_post(&sem_C);
    }
    return NULL;
}

void* print_sequence_C(void* arg) {
    for (int i = 0; i < 7; i++) {
        sem_wait(&sem_C);
        printf("C%d\n", counter);
        counter++;
        sem_post(&sem_A);
    }
    return NULL;
}

int main() {
    sem_init(&sem_A, 0, 1);
    sem_init(&sem_B, 0, 0);
    sem_init(&sem_C, 0, 0);

    pthread_t thread_A, thread_B, thread_C;
    pthread_create(&thread_A, NULL, print_sequence_A, NULL);
    pthread_create(&thread_B, NULL, print_sequence_B, NULL);
    pthread_create(&thread_C, NULL, print_sequence_C, NULL);

    pthread_join(thread_A, NULL);
    pthread_join(thread_B, NULL);
    pthread_join(thread_C, NULL);

    sem_destroy(&sem_A);
    sem_destroy(&sem_B);
    sem_destroy(&sem_C);

    return 0;
}
